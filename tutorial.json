{
    "tutorial_Python": [
        [
            "In this tutorial you will learn Python basics.",
            "",
            "Python is one of the most popular",
            "programming languages and it was",
            "created by Guido van Rossum, and",
            "released in 1991.",
            "",
            "Python is used almost everywhere and has",
            "simple syntax similar to the English",
            "language. Python uses new lines to",
            "complete a command, as opposed to other",
            "programming languages which often use",
            "semicolons or parentheses.",
            "",
            "Python relies on indentation, using",
            "whitespace, to define scope (such as",
            "the scope of loops, functions and classes).",
            "",
            "Other programming languages often use",
            "curly-brackets for this purpose.", 
            "Python is interpreted language which",
            "means that it is executed line by line",
            "by a program called interpreter.",
            "",
            ""
        ],
        [
            "Output in Python",
            "",
            "To output something on screen in Python,",
            "we use the print() function. We just need",
            "to type in the print function and pass it a",
            "text surrounded with quotes.",
            "(In Python, it doesn't matter if they are",
            "single or double, but in this game we will",
            "stick with double quotes). To output",
            "'Code_Craft' on screen we will do it like",
            "this:",
            "    print(\"Code_Craft\")"
        ],  
        [
            "Comments in Python",
            "",
            "Comments are used to explain code, make",
            "it more readable or prevent the code",
            "from executing.",
            "    # this is a comment",
            "    print(\"Hello, World!\")",
            "",
            "Comments can also be placed at the end",
            "of a line.",
            "    print(\"Hello, World!\") #this is a comment",
            "",
            "Or they can be used to prevent the code",
            "from executing.",
            "    # print(\"Hello, World!\")",
            ""
        ],
        [
            "Variables in Python",
            "",
            "Variables are used to store data of",
            "various types. A variable is created the",
            "moment you first assign a value to it.",
            "    x = 5",
            "",
            "A variable name must start with a letter",
            "or the underscore character, it cannot",
            "start with a number, and it can only",
            "contain alpha-numeric characters and",
            "underscores.",
            "Variable names are case-sensitive and",
            "cannot be any of the Python keywords.",
            "",
            "Main data types in Python are int, float,",
            "str, and bool.",
            "",
            "\"int\" is used to represent a whole",
            "number.",
            "    x = 3 # this is an int",
            "",
            "\"float\" is used to represent a number",
            "with a decimal point.",
            "    x = 3.5 # this is a float"
        ],
        [
            "\"str\" is used to represent text.",
            "    x = \"Code_Craft\"",
            "",
            "\"bool\" is used to represent logical 0 or 1.",
            "    x = True # True is logical 1",
            "    y = False # False is logical 0",
            "",
            "We can also change data from one type to",
            "another, this is called casting.",
            "    a = int(2) # a = 2",
            "    b = int(2.5) # b = 2",
            "    c = int(\"4\") # c = 4",
            "",
            "    a = float(2) # a = 2.0",
            "    b = float(2.5) # b = 2.5",
            "    c = float(4) # c = 4.0",
            "",
            "    a = str(\"s\") # a = \"s\"",
            "    b = str(5) # b = \"5\"",
            "    c = str(4.5) # c = \"4.5\"",
            ""
        ],
        [
            "You can get the data type of any object",
            "by using the type() function:",
            "    x = 5",
            "    print(type(x))",
            "    # output: <class 'int'>",
            "",
            "We can assign values to multiple",
            "variables in one line.",
            "    x, y, z = 1, 2, 3",
            "    # x is 1",
            "    # y is 2",
            "    # z is 3",
            "",
            "We can also assign the same value to",
            "multiple variables in one line.",
            "    x = y = z = \"Steve\"",
            "    # x, y, and z are all \"Steve\""
        ],
        [
            "If you have a collection of values in a list",
            "or tuple, Python allows you to extract",
            "values into variables.",
            "    mobs = [\"Spider\", \"Creeper\", \"Zombie\"]",
            "    x, y, z = mobs",
            "    # x is \"Spider\"",
            "    # y is \"Creeper\"",
            "    # z is \"Zombie\"",
            "",
            "To output variables, we use the print()",
            "function.",
            "    x = \"Code_Craft\"",
            "    print(x)",
            "",
            "If we want to output more variables, we",
            "can separate them by commas.",
            "    x = \"We\"",
            "    y = \"love\"",
            "    z = \"Code_Craft\"",
            "    print(x, y, z)",
            "    # output: We love Code_Craft"
        ],
        [
            "Or we can use + but then we need to input",
            "spaces in variables if we want them",
            "separated.",
            "    x = \"We \"",
            "    y = \"love \"",
            "    z = \"Code_Craft\"",
            "    print(x + y + z)",
            "    # output: We love Code_Craft",
            "For numbers, the + operator works as a",
            "mathematical operator.",
            "    x = 5",
            "    y = 3",
            "    print(x + y)",
            "    # output: 8",
            "",
            "If we try to combine numbers and",
            "strings with the + operator, we get an",
            "error, so it's best to use commas for",
            "outputting multiple variables.",
            "",
            "In Python, we can also create multiline",
            "strings using three double quotes.",
            "    a = \"\"\"Lorem ipsum dolor sit amet,",
            "    consectetur adipiscing elit.\"\"\""
        ],
        [
            "Strings are actually arrays, so we can",
            "access their characters by index (starting",
            "from 0).",
            "    a = \"Hello\"",
            "    # a[0] = \"H\"",
            "    # a[4] = \"o\"",
            "",
            "We can also loop through them with a for",
            "loop.",
            "    for el in \"Code\":",
            "        print(el)",
            "    # output:",
            "    # C",
            "    # o",
            "    # d",
            "    # e",
            "",
            "To get the length of a string, we use the",
            "len() function.",
            "    print(len(\"Hello\"))",
            "    # output: 5"
        ],
        [
            "Strings can be sliced to extract portions",
            "of them using a range of indexes.",
            "    x = \"Hello\"",
            "    print(x[1:3])",
            "    # output: el"
        ],
        [
            "Operators in Python",
            "",
            "Arithmetic operators",
            "+ -> Addition",
            "- -> Subtraction",
            "* -> Multiplication",
            "/ -> Division",
            "% -> Modulus",
            "** -> Exponentiation",
            "// -> Floor division",
            "",
            "Assignment operators",
            "They are used to assign values to",
            "variables and they always have = in them.",
            "With them you can replace:",
            "    a = a + 5 with a += 5",
            "Same goes with all other operators:",
            "    a = a // 2 -> a //= 2",
            "    a = a ** 3 -> a **= 3"
        ],
        [
            "Comparison operators",
            "== -> Equal",
            "!= -> Not equal",
            "> -> Greater than",
            "< -> Less than",
            ">= -> Greater or equal to",
            "<= -> Less or equal to",
            "They return a boolean:",
            "    3 == 5 -> False",
            "    4 <= 5 -> True",
            "",
            "Logical operators",
            "and -> returns True if both values are",
            "True",
            "or -> returns True if any of the values is",
            "True",
            "not -> reverses Bool value",
            "True -> False, False -> True",
            "    1 < 2 and 3 <= 3 -> True",
            "    1 > 2 and 4 > 5 -> False",
            "    not 1 == 1 -> False"
        ],
        [
            "Lists in Python",
            "",
            "Lists are created using square brackets [],",
            "and items are separated by commas.",
            "Lists can hold multiple data types, including",
            "numbers, strings, or even other lists.",
            "    my_list = [1, \"apple\", 3.5, [2, 4]].",
            "",
            "Elements in a list can be accessed using",
            "their index, starting from 0. Negative",
            "indexing allows you to access items from",
            "the end of the list (-1 for the last item).",
            "    my_list[0]",
            "    # returns the first element (1)",
            "    my_list[-1]",
            "    # returns the last element ([2, 4])",
            "",
            "Lists are mutable, meaning you can",
            "change their elements. You can update,",
            "insert, or remove items using indexing or",
            "built-in methods like append(), insert(),",
            "remove()"
        ],
        [
            "Example:",
            "    my_list[1] = \"orange\"",
            "    # updates the second item.",        
            "    my_list.append(\"banana\") # adds an",
            "element to the end of the list."
        ],
        [
            "List Methods:",
            "append(): Adds an item to the end.",
            "extend(): Adds multiple items from",
            "another list.",
            "remove(): Removes the first occurrence",
            "of an item.",
            "pop(): Removes and returns an item at a",
            "given index.",
            "sort(): Sorts the list (can be ascending",
            "or descending).",
            "    Example: my_list.sort() sorts the items",
            "    in the list in-place.",
            "",
            "You can use the len() function to find how",
            "many items are in a list.",
            "    Example: len(my_list) returns the",
            "    number of elements in my_list.",
            "",
            "Lists can be sliced to extract portions of",
            "them using a range of indexes.",
            "    Example: my_list[1:3] returns a sublist",
            "    containing items from index 1 to 2 (not",
            "    including index 3)."
        ],
        [
            "There are more ways to store collections of",
            "data (tuples, sets, dictionaries), but we will",
            "ignore them for now."
        ]
    ],
    "pages_Python": 16
}